// Generated by CoffeeScript 2.5.1
(function() {
  var fs, main, path, spawnSync;

  fs = require('fs');

  path = require('path');

  ({spawnSync} = require('child_process'));

  main = function(argv) {
    var backupDir, dst, fileList, filename, filesToBackup, i, j, len, len1, opts, originalCwd, parsed, rootDir, spawnOptions, src;
    opts = require('minimist')(argv, {
      boolean: ['v'],
      alias: {
        verbose: 'v'
      }
    });
    rootDir = path.normalize(path.join(path.dirname(fs.realpathSync(__filename)), '..'));
    backupDir = path.normalize(path.join(path.dirname(fs.realpathSync(__filename)), '../backup'));
    if (opts.verbose) {
      console.log(`rootDir  : ${rootDir}`);
      console.log(`backupDir: ${backupDir}`);
    }
    if (!fs.existsSync(backupDir)) {
      console.error(`ERROR: Please create a valid github repo in ${backupDir}`);
      return;
    }
    filesToBackup = [];
    fileList = fs.readdirSync(rootDir);
    for (i = 0, len = fileList.length; i < len; i++) {
      filename = fileList[i];
      parsed = path.parse(filename);
      if ((parsed.ext === '.json') && !parsed.name.match(/^package/)) {
        filesToBackup.push(filename);
      }
    }
    for (j = 0, len1 = filesToBackup.length; j < len1; j++) {
      filename = filesToBackup[j];
      src = path.normalize(path.join(rootDir, filename));
      dst = path.normalize(path.join(backupDir, filename));
      if (opts.verbose) {
        console.log(`Copy: ${src} -> ${dst}`);
      }
      fs.copyFileSync(src, dst);
    }
    spawnOptions = {};
    if (opts.verbose) {
      spawnOptions.stdio = 'inherit';
    }
    originalCwd = process.cwd();
    process.chdir(backupDir);
    spawnSync('git', ['add', '.'], spawnOptions);
    spawnSync('git', ['commit', '-m', 'update'], spawnOptions);
    spawnSync('git', ['push'], spawnOptions);
    return process.chdir(originalCwd);
  };

  module.exports = main;

}).call(this);
